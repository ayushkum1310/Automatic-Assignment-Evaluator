COUNTA:
counts the number of non-blank values in a column, regardless of data type
count the the non-blank values in a column or non-numerical value
Syntax: COUNTA [<column>]
COUNTX:
is used to count the number of rows in a table where an expression evaluate to a non-blank value 
useful when you need to apply some calculation counting the rows
Syntax: COUNTX [<table>, <expression>]
COUNTBLANK:
is used to count the number of blank (or missing) values in a column
useful for data availability checks and identifying your dataset
Syntax: COUNTBLANK [<columns>]
DISTINCTCOUNT:
used to count the number of unique non-blank values in a column
useful for scenarios where you need to determine the number of unique customers, products entries in a dataset
Syntax: DISTINCTCOUNT [<column>]
MAX:
returns the largest numerical value in a column
Syntax: MAX [<column>]
MAXA:
returns the largest value in a column, but it can handle both numerical data and non-numerical data (logical values and blanks)
Syntax: MAXA [<column>]
MAXX:
evaluates an expression for each row of a table and returns the largest numerical value.
useful when you need to apply a calculation to each row before finding the maximum value.
Syntax: MAXX [<table>, <expression>]
Sales table with columns quantity, Price and Discount 
Find maximum revenue after discount
Max. Revenue = MAXX[Sales[Quantity]*Sales[Price]*(1-Sales[Discount])]
AVERAGE:
returns the arithmetic mean of the numeric values in a column
Syntax: AVERAGE [<column>]
AVERAGEA:
returns the arithmetic mean of the values in a column, treating text and ignoring blanks
Syntax: AVERAGEA [<columns>]
AVERAGEEX:
calculates the average of an expression for each row of a table
Syntax: AVERAGEEX [<table>, <expression>]
COUNTROWS:
returns the count of number of rows in a table
Syntax: COUNTROWS [<table>]
Date:  
YOUVA

**Daily and Time Function 2** 
are essential for manipulating time data, performing, and creating meaningful insights in Power BI

**CALENDAR**
generates a date table from a specified end date
**Control**: free control over specifying the start
**Flexibility**: less flexible to set the start and end dates.
Not have built in support end specification

**Syntax**: CALENDAR [<start-date>, <end-date>]

**Example:** CALENDAR [DATE (2024,1,1), DATE (2024,12,31)]

**Scenario:** Used to create a custom date table, which is based on calculations, and analysis.


**CALENDAR AUTO:**
automatically generates minimum and maximum dates
**Control**: less control as it adapts to the data.
**Flexibility**: More flexible to adjust to the data model.

**Fiscal Year Support:** Allows specifying a fiscal year-end month, which adjust the date table accordingly.
Can quickly generate a date table without specifying  <fiscal_year_end_month>

**Syntax**: CALENDARAUTO [<fiscal_year_end_month>]

**Example:** CALENDARAUTO //Adjusts for fiscal year ending in June

**Scenario**: Useful when in advance, or when to dynamically generate data

**DATE:**
returns the specified date in datetime format.
Used to create a date and day component.

**Syntax:** DATE (<year>, <month>, <day>)

**Example:** DATE (2024, 6, 30)

**DATEDIFF:**
returns the number of two dates.
Useful for calculating the difference between two dates in terms of days, months, years etc.

**Syntax:** DATEDIFF [<start-date>, <end-date>, <interval>]
**Example:** DATEDIFF [Order Date, Delivery [Delivery Date], DAY]

**DATEVALUE:**
converts a date in the datetime format. 
To convert date strings for further calculations. 
**Syntax:** DATEVALUE [<date>]
**Use Case:** convert a date string from a CSV import to a datetime value.
**Example:** DATEVALUE ["2024-06-30"]

**DAY:**
returns the day of the month, a number from 1 to 31.
Extracts the day component from a date.
**Syntax**: DAY [<date>]
â€¢ Extracting the day part of a transaction 

**Example:** DAY [Transaction Date]
Page No.:                    YOUVA
Date:

MONTH:
Returns the month as a number from 1 (January) to 12 (December)
Extracts the month component from a date
Syntax: MONTH [<date>]
Extracting the month part of a sales date
Example: MONTH [Sales Date]
Result: 
Returns the year of a date as a four-digit integer
in the range 1900 - 9999
Syntax: YEAR [<date>]
Extracting the year part
Example: YEAR [Employee Date]
QUARTER:
Returns the quarter as a number from 1 to 4
Syntax: QUARTER [<date>]
Determining the quarter of a sale was made
Example: QUARTER [Sale Date]


Page No.:                    YOUVA
Date:

HOUR:
Return the hour as a number from 0 to 23
Used to extract the hour value, which can be useful in time-based analysis.
Syntax: HOUR [<datetime>]
Use Case: Analysing the distribution of transactions across different hours of the day
Example: HOUR [Transaction Time]
If transaction time is "14:35:20", this returns 14.


Page No.:                    YOUVA
Date:

MINUTE:
Return the minute as a number from 0 to 59
Used to extract the minute value for detailed time analysis.
Syntax: MINUTE [<datetime>]
Use Case: Determining the detailed logging or monitoring purposes.
Example: MINUTE [Transaction Time]
If transaction time is "14:35:20", this returns 35


Page No.:                    YOUVA
Date:

SECOND:
Returns the seconds of a time value as a number from 0 to 59.
Used to extract the second value useful in precise time-based analysis.
Syntax: SECOND [<date time>]
Use Case: Extracting the second part of a timestamp for high precision logging.
Example: SECOND [Transaction Time]
If transaction time is "14:35:20", this returns 20.


Page No.:                    YOUVA
Date:

TODAY:
Description: returns the current date.
Useful for calculations that require the current date such as logging
Syntax: TODAY()
Use Case: Calculating the number of days since a specific event.
Example: TODAY()
If today is June 24, 2024, this returns 2024-06-24
NOW:
Returns the current date and time
Used for calculations that require both the current date and time, such as real-time monitoring and updates.
Returns the number of days since a specific date.
M T W T F S S
Page No.:
Date:
YOUVA

Syntax: NOW()
Use Case: Determining exact timestamp of the latest data refresh

TIME:
converts hours, minutes and seconds given as numbers to a time in datetime format.
Useful for constructing hours, minutes and seconds.
Syntax: TIME [<hour>, <minutes>, <seconds>]

Use Case: Creating a time value for a specific event.
Example: TIME [14, 35, 20]


TIMEVALUE: 
converts a time in text format to a time in a datetime format.
Useful for converting time datetime format for analysis
Syntax: TIMEVALUE [<time_value>]
Use case: converting a time string from a csv import to a datetime value.

Example: TIMEVALUE  "14: 35: 20"
//Returns 14:35:20

WEEKDAY:
return the day of the week for a given date. It can return a number from 1 to 7, which corresponds to a specific day of week

Syntax: WEEKDAY (<date>, <return_type>)
Example: WEEKDAY [OrderDate], 1)
// returns a number from 1 (sunday) to 7 for each date

WEEKNUM:
return the week number. This function helps find a particular date falls into which week of the year. 
Syntax: WEEKNUM (<date>)
Example: WEEKNUM [OrderDate], 1)
//Returns the week number.
Week 1 stood on sunday.

NETWORKDAYS:
return the number of whole workdays between two dates, excluding weekends and holidays. 
This is useful for calculating business days between two dates.
Syntax: NETWORKDAYS [<start_date>, <end_date>[, <weekend>, <holidays>]]
start_date: start date
end_date: end date 
weekend (optional): Indicate weekends. Default is 1 (Saturday, Sunday).
Holidays (optional): A column of dates to be excluded from the working days

Example:
NETWORKDAYS ['OrderDate', 'Order ['Delivery Date]' [, Holiday]


CALENDAR: 
generates a date table from a specified start and end dates based on the data in the model.
More flexible as it adapts to the data range in the data model.
Allows specifying a fiscal year's end month, which adjusts the date range across rollingy.

CALENDARAUTO
Automatically determines the start and end dates based on the data in the model.
DAX

Aggregation Function -

one essential for summarizing data , performing mathematical operation and creating meaningful insights in POWER BI.

SUM
used to calculate the total sum of a single column
It adds up all the values in the specified column

Syntax : SUM[<column>]

SUMX
It is more flexible and powerful .
It is an iterator- function , meaning it iterates over a table, evaluates an expression for each and then returns the sum of the results.

Syntax : SUMX[<table>,<expression>]

count
is to count the non-blank numerical values in a column and excludes the blank and Null values in a column.

Syntax : count[<column>]
