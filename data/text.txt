COUNTA :
counts the number of non-blank values in a column, regardless of data type 
count the non-blank values in a column
regardless of numerical 
Syntax : COUNTA [<column>]
COUNTX :
is used to count the number of rows in a table where an expression evaluates to a non-blank value 
useful when you need condition  before 
Syntax : COUNTX [<table>, <expression>]

COUNTBLANK :
is used to count the number of blank (or missing) values in a column.
useful for data quality checks and identifying missing data within your dataset. 
Syntax : COUNTBLANK [<columns>]

DISTINCTCOUNT
used to count the number of unique non-blank values in a column.
useful for scenarios where you need to determine the number of unique customers, products or any other unique entries in a dataset.
Syntax : DISTINCTCOUNT [<column>]

MAX:
return the largest numeric value in a column.
Syntax : MAX [<column>]

MAXA :
returns the largest value in a column, but it can handle both numeric and non-numeric data types including text, logical values and blanks 
Syntax : MAXA [<column>]

MAX :
evaluates an expression for each row of a table and returns the largest numerical value
useful when you need to apply a calculation to each row before finding the maximum value
Syntax : MAXX [<table>, <expression>]

A sales table with columns quantity, price and discount
Find maximum revenue after discount.
Max. Revenue = MAXX [sales, sales [Quantity] * Sales [Price] * (1 - Sales [Discount])]

AVERAGE :
returns the arithmetic mean of the numeric values in a column.
Syntax : AVERAGE [<column>]

AVERAGEA :
returns the arithmetic mean of the values in a column, treating text, logical values and blanks as o
Syntax : AVERAGEA [<column>]

AVERAGE :
calculates the average of an expression for each row of a table.
Syntax : AVERAGE [<table>, <expression>]

COUNTROWS
returns the count of number of rows in a table
Syntax : 'COUNTROWS [<table>]
Date:  YOUVA

**Daily and Time Function** 2:

* are essential for manipulating time data, performing calculations based on dates, and creating meaningful insights in POWER BI.

**CALENDAR** :

* generates a date table from a specified start date to a specified end date. 
* **Control**: Free control over specifying the start and end dates.
* **Flexibility**: Less flexible to set the start and end dates.
* **Fiscal Year Support**: Does not have built-in support for fiscal years.
* **Syntax**: CALENDAR[`<start-date>`, `<end-date>`]

**Example**: CALENDAR[DATE(2024,1,17), DATE(2024,12,31)]

**Scenario**: Used to create a custom data table, which is based on calculations and analysis.


**CALENDAR AUTO**:

* automatically generates a date table based on the minimum and maximum dates in the model.
* **Control**: Less control as it adapts to the model.
* **Flexibility**: More flexible to adjust to the data model because it automatically adjust to the data range present in the model.


**Fiscal Year Support**: Allows specifying a fiscal year-end month, which adjust the date range accordingly. 

* **Can quickly generate a date table without specifying the fiscal year-end month.**
* **Syntax**: CALENDARAUTO[`<fiscal-year-end-month>`]

**Example**: CALENDARAUTO[11/ Adjusts for fiscal year ending in June]


**Scenario**: Useful when in advance, or when to dynamically generate data.


**DATE**:

* returns the specified date in datetime format.
* Used to create a date and day component.
* **Syntax**: DATE[ `<year>`, `<month>`, `<day>`]

**Example**: DATE[2024, 6, 30]

**DATEDIFF**:

* returns the number of intervals boundaries between two dates.
* Useful for calculating the difference between two dates in terms of days, months, years etc.

**Syntax**: DATEDIFF[ `<start-date>`, `<end-date>`, `<interval>`]

**Example**: DATEDIFF[OrderDate, Delivery[Delivery Date], DAY]


**DATEVALUE**:

* converts a date in the form of text to a date in datetime format.
* To convert date strings for further calculations.

**Syntax**: DATEVALUE[`<date>`]

**Use case**: Convert a date string from a CSV import to a datetime value.

**Example**: DATEVALUE[ "2024-06-30"]

**DAY**:

* returns the day of the month, a number from 1 to 31.
* Extracts the day component from a date.

**Syntax**: DAY[ `<date>`] 

* Extracting the day part of a transaction. 

**Example**: DAY[Transaction Date]
MONTH:
Returns the month as a number from 1 (January) to 12 (December)
Extracts the month component from a data
syntax: MONTH [<date>]
Extracting the month part of a sales date
Example: MONTH [<Sales Date>]
returns the year of a date in the range 1900 - 9999
syntax: YEAR [<date>]
Extracting the year part of a sales date
Example: YEAR [Employee Date]

QUARTER:
Returns the quarter as a number from 1 to 4.
syntax: QUARTER[<date>]
determining the quarter in which sale was made 
Example: QUARTER [Sales Date]

HOUR: 
Return the hour as a number from 0 to 23
Used to extract the hour value, which can be useful in time-based analysis.
syntax: HOUR [<datetime>]
Use Case: Analyzing the distribution of transactions across different hours of the day
Example: HOUR [Transaction Time] if Transaction Time is "14:35:20", this returns 14.

MINUTE: 
Return the minuly as a number from 0 to 59.
Used to extract the minute value for detailed time analysis.
syntax: MINUTE [<datetime>]
Use Case: Determining the detailed logging or monitoring purposes.
Example: MINUTE [Transaction Time] if Transaction Time is "14:35:20", this returns 35. 

SECOND: 
Returns the seconds of a time value as a number from 0 to 59.
Used to extract the second component from a time value useful in precise time-based analysis.
syntax: SECOND [<datetime>]
Use Case: Extracting the second part of a timestamp for high precision logging.
Example: SECOND [Transaction Time] if Transaction Time is "14:35:20", this returns 20. 

TODAY:
description: returns the current date.
syntax: TODAY()
Use Case: Calculating the number of days since a specific date. 
Example: TODAY() if today is June 24, 2024, this returns 2024-06-24
NOW:
Returns the current date and time, both the current date and time. 
Useful for calculations that require the current date and time, such as daily reports.
Used for calculations that require both the current date and time, such as real-time monitoring.
M  T  W  T  F  S  S 
Page No: _ YOUVA 
Date: _

Syntax: NOW() 
Use Case: Determining the exact timestamp of the latest data refresh

TIME: converts hours, minutes and seconds given as numbers to a time in datetime format. 
Useful for constructing hour, minute and second components. 

Syntax: TIME[<hour>, <minute>, <seconds>]
Use Case: Creating a time value for a specific event

Example: TIME[14, 35, 20]

TIMEVALUE: converts a time in text format to a time in a datetime string from data imported into analysis 
Useful for converting time datetime format for analysis 

Syntax: TIMEVALUE[<time value>] 
Use Case: converting a time datetime value 

Example: TIMEVALUE["14:35:20"]
//Returns 14:35:20

WEEKDAY
return the day of the week for a given date. It can return a number from 1 to 7, corresponds to a specific day of week

Syntax: WEEKDAY[<date>, <return-type>] 
Example: WEEKDAY[ORDERDATE],1)
returns a number from 1(sunday) to 7 for each date

WEEKNUM
return the week number. This function helps find a particular date falls into which week of the year.

Syntax: WEEKNUM[<date>] 
Example: WEEKNUM[ORDERDATE]
Returns the week number the week stood on sunday

NETWORKDAYS
return the number of whole workdays between two dates, excluding weekends and holidays. 
This is useful for calculating business days between two dates. 

Syntax: NETWORKDAYS[<start-date>, <end-date>, <weekend>, <holiday>]

start-date: start date
end-date: end date 
weekend (optional): Indicates which day are considered weekend is 1 [saturday, sunday]. 
Holidays (optional): A column of dates to be excluded from working days.

Example: NETWORKDAYS["ORDERDATE", "ORDER[DeliveryDate]", 1, "Holiday"]

CALENDAR
generates a date table from a specified start and end dates based on the data in the model. 

More flexible as it adapts to the data range in the data model.

Allows specifying a fiscal year end month, which adjusts the date range accordingly.

CALENDARAUTO
Automatically determines the start and end dates based on the data in the model.

Does not have built-in support for fiscal year and specification
DAX
Aggregation Function -
one essential for summarizing data, performing mathematical operations and creating meaningful insights in POWER BI.
SUM
used to calculate the total sum of a single column.
It adds up all the values in the specified column.
Syntax: SUM[<columns>]
SUMX
It is more flexible and powerful.
It is an iterator-function, meaning it iterates over a table, evaluates an expression for each and then returns the sum of the results.
Syntax: SUMX[<table>, <expression>]
count
is to count the non-blank numerical values in a column and excludes the blank and null values in a column.
Syntax: count[<columns>]
