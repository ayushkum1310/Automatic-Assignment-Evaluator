CountA:
counts the number of non-blank values in a column regardless of data type
count the non-blank values in a column or non-numerical cells.
Syntax: COUNTA [column] 
COUNTX:
is used to count the number of rows in a table where an expression returns a non-blank value
useful when you need a condition before counting the rows.
Syntax: COUNTX [table, <expression>]
COUNTBLANK:
is used to count the number of blank or missing values in a column.
useful for data quality checks and identifying missing data within your dataset.
Syntax: COUNTBLANK [column] 
DISTINCTCOUNT
used to count the number of unique non-blank values in a column.
useful for scenarios where you need to determine the number of unique customers, products or any other unique entries in a dataset
Syntax: DISTINCTCOUNT [column]
MAX:
return the largest numerical value in a column.
Syntax: MAX [column]
MAXA: 
returns the largest value in a column, but it can handle both numerical and non-numerical data types including text, logical values and blanks.
Syntax: MAXA [column]
MAXx:
evaluates an expression for each row of a table and returns the largest numerical value.
useful when you need to find the maximum value for each row before finding the maximum revenue after discount.
Syntax: MAXX [table, <expression>]
A sales table with columns quantity, Price and Discount
Max. Revenue = MAXX [sales, sales [quantity] * sales [Price] * (1 - sales [Discount])]
AVERAGE:
returns the arithmetic mean of the numeric values in a column.
Syntax: AVERAGE [column]
AVERAGEA: 
returns the arithmetic mean of a column, treating text and ignoring text.
Syntax: AVERAGEA [column]
AVERAGEX:
calculates the average of an expression for each row of a table.
Syntax: AVERAGEX [table, <expression>]
COUNTROWS
returns the count of number of rows in a table.
Syntax: "COUNTROWS [table] "
Date:

YOUVA

**Daily and Time Function:**

are essential for manipulating time data, performing analysis and creating meaningful insights in POWER BI

**CALENDAR:**

generates a date table from a specified start date to a specified end date

Control: Free control over specifying the start date

Flexibility: less flexible as it set the start date

Syntax: CALENDAR [ <start-date>,<end-date>]

Example: CALENDAR [ DATE (2024,1,17), DATE(2024,12,31)]

Scenario: Used to create a custom date table, which is based on calculations and analysis

**CALENDAR AUTO:**

automatically generates minimum and maximum dates in the model

Control: less control as it adapts to the model

Flexibility: More flexible to adjust to the data model

Fiscal Year Support: Allows specifying a fiscal year, which adjust the date range accordingly

Can quickly generate a date table without specifying a fiscal year end month

Syntax: CALENDARAUTO [ <fiscal_year_end_month>]

Example: CALENDARAUTO [12]

Scenario: useful when the data range is not known and you want the date table adapt to the data model

**DATE:**

returns the specified date in datetime format

Used to create a date and day components

Syntax: DATE(<year>,<month>,<day>)

Example: DATE (2024, 6, 30)

**DATEDIFF:**

returns the number of intervals between two dates

Useful for calculating the difference between two dates in terms of days, months, years etc.

Syntax: DATEDIFF [<start_date>, <end_date>, <intervals>]

Example: DATEDIFF [OrderDate, Delivery (Delivery Date), DAY ]

**DATEVALUE:**

converts a date in the form of text to a date in datetime format

To convert date strings for further calculations

Syntax: DATEVALUE [ <date>]

Use case: convert a date string from a csv import to a datetime value

Example: DATEVALUE [ "2024-06-30"]

**DAY:**

returns the day of the month, a number from 1 to 31

Extracts the day component from a date

Syntax: DAY [ <date>]

Example: DAY [ Transaction Date]
Page No.:                       YOUVA
Date:

MONTH:
Returns the month as a number from 1 (January) to 12 (December)
Extracts the month component from a data
syntax: MONTH [<date>]
Extracting the month part of a sales date
Example: MONTH [Sales Date]
result:
YEAR:
Returns the year of a date in the range 1900-9999
Extracting the year part of employee date
Example: YEAR [Employee Date]
result:
QUARTER:
Returns the quarter as a number from 1 to 4
determining the quarter in which a sale was made
syntax: QUARTER [<date>]
determining the quarter in which a sale was made
Example: QUARTER [Sale Date]
result:
HOUR:
Return the hour as a number from 0 to 23
Used to extract the hour value which can be useful in time-based analysis.
syntax: HOUR [<datetime>]
Use Case: Analyzing the distribution of transactions across different hours of the day.
Example: HOUR [Transaction Time] 
If transaction time is "14:35:20", this returns 14 
MINUTE:
Return the minute as a number from 0 to 59
Used to extract the minute value for detailed time analysis
syntax: MINUTE [<datetime>]
Use Case: Determining the detailed logging or monitoring purposes. 
Example: MINUTE [Transaction Time] 
If transaction time is "14:35:20", this returns 35
SECOND:
Returns the seconds of a time value as a number from 0 to 59.
Used to extract the second value useful in precise time-based analysis.
syntax: SECOND [<datetime>]
Use Case: Extracting the second part of a timestamp for high precision logging.
Example: SECOND [Transaction Time]
If transaction time is "14:35:20", this returns 20
TODAY:
description: Returns the current date.
Useful for calculations that require the current date such as logging.
syntax: TODAY()
Use Case: Calculating the number of days since a specific event.
Example: TODAY()
If today is June 24/2024, this returns 2024-06-24
NOW:
Returns the current date and time.
Used for calculations that require both the current date and time, such as real-time monitoring.
M T W T F S S
Page No.:
Date:
YOUVA
Syntax: NOW()
Use Case: Determining the exact timestamp of the latest data refresh
TIME:
converts hours, minutes and seconds given as numbers to a time in datetime format.
Useful for constructing hours, minutes and seconds from separate components.
Syntax: TIME <hour>, <minutes>, <seconds>
Use Case: Creating a time value for a specific event
Example: TIME(14,35,20)
TIMEVALUE:
converts a time in text format to a time in a datetime string from data import numpy.datetime64
Useful for converting time from a csv import to a datetime value.
Syntax: TIMEVALUE <time_value>
Use case: converting a time string from a csv import to a datetime value.
Example: TIMEVALUE("14:35:20") 
//Returns 14:35:20
WEEKDAY
return the day of the week for a given date. It can return a number from 1 to 7, corresponds to a specific day of week
Syntax: WEEKDAY (<date>, <return-type>)
Example: WEEKDAY (OrderDate) , 1)
return a number from 1 (sunday) to 7 for each date. Assuming weekends
WEEKNUM
return the week number for a given date value. This function helps finding which week of the year a particular date falls into.
Syntax: WEEKNUM (<date>)
Example: WEEKNUM (OrderDate), 1)
Returns the week number for each date, assuming week starts on sunday
NETWORKDAYS
return the number of whole workdays between two dates, excluding weekends and holidays.
This is useful for calculating business days between two dates
Syntax: NETWORKDAYS (<start_date>, <end_date>, <weekend>, <holidays>)
start_date: start date
end_date: end date
weekend (optional): Indicates which day considered weekend is 1 (saturday, sunday).
Holidays (optional): A collection of dates to be excluded from working days
Example -
NETWORKDAYS ('OrderDate', 'Order['DeliveryDate']', 1, Holiday)
CALENDAR
generates a date table from a specified start and end dates based on the data in the model.
More flexible as it adapts to the data range in the data model.
Allows specifying a fiscal year end month, which adjusts the date range across rollingly.
CALENDARAUTO
Automatically determines the start and end dates based on the data in the model.
DAX
Aggregation Function -
One essential for summarizing data, performing mathematical operations and creating meaningful insights in POWER BI.

SUM
used to calculate the total sum of a single column. It adds up all the values in the specified column.
Syntax : SUM [<columns>]

SUMX
It is more flexible and powerful.
It is an iterator-function, meaning it iterates over a table, evaluates an expression for each and then returns the sum of the results.
Syntax : SUMX [<table>, <expression>]

count
is to count the non-blank numerical values in a column and excludes the blank and NULL values in a column.
Syntax : count[<columns>]
